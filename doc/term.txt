Help for Vim-Term plugin *vim-term*

The plugin requires |+pythonx|, it will work without it but a bit
unexpectedly (command args are passed with <f-args>).  Python support is used
to parse arguments with `shlex.split` function, i.e. argument are parsed the
same way as in a terminal; if there is no python support you can explicitly
tell how to parse them by escaping white spaces which should not split
arguments (this is how <f-args> works).

						    *:Term*
:[N]Term [options] [args]
	if no args are given list terminals, otherwise run the command [args].
	[options] can be any `:terminal` option plus one of
	++dir	      pass current working directory to |term_start|
	++termwin     reuse terminal window (if already opened)
	++nokill      do not kill (by default `++kill=kill`is passed)
	++rows=n      use that meany rows (for both window and the terminal),
		      this value is persistent per buffer (stored in
		      `b:term_rows` the default value is `16`.
	++ls	      Force showing all terminals and shells (even if there's
		      only one).

	When listing terminals the following info is displayed: buffer number,
	abreviated status "r" for "running", "n" for "normalmode" and "f" for
	"finished", command (might be abbreviated) and title.

	If [N] is specified, it will be used to pick the terminal if there's
	more than one running.  Default value is 0, which means you will be
	presented with a choice.

	Examples: >
	  :Term ++termwin ls
	  :Term ++hidden firefox %:r.html
	  :Term ++hidden http-server "some directory with spaces"

						    *:Shell*
:[N]Shell [options]
	Open a shell, [options] are like the same as for `:Term` command
	(except ++ls which is ignored).

	If [N] is specified, it will be used to pick the shell if there's more
	than one running.  Default value is 0, which means you will be
	presented with a choice.

						    *:NixTerm*
:NixTerm [options] [args]
	Either open `nix-shell` or run [args] command in using `nix-shell --run`.
	[options] can be any `:Term` option or any nix-shell flag, e.g. >
	    :NixShell -A default --arg test true
<
	It is only defined if you set `g:vim_term_nixterm` varaible to any
	value.

	Note that the command you want run must be quoted.

	You can define *g:vim_term_nix_shell* as the default command to run
	when you run |:NixTerm| it will be passed along with `--run`

	When you use `--run` or `--command` arguments you must quote it,
	or you can put the command after all arguments, and |:NixTerm| will
	add `--run` and pass your command to `nix-shell`, see examples below.

	Examples: >
	  :NixTerm
	  :NixTerm -A arg --arg dev true --run "ghcid -c 'cabal new-repl'"
	  :NixTerm shell.nix ghcid -c 'cabal new-repl'
<

						    *g:vim_term_termwin*
|g:vim_term_termwin| if set to |v:true| (default |v:false|) then all the
commands will behave as ++termwin was passed to them by default (re-using the
current terminal window).  You can use then ++notermwin to open in a new window.
